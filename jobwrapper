#!/bin/sh
#
# jobwrapper is a wrapper script to prevent overlapping job runs and is
# particulary useful for potentially long-running routines called via cron
# - patches welcome
#
# Version: 0.1
#
# License: MIT
#
# Copyright (c) 2007-2009 Michael Shuler <michael@pbandjelly.org>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# set basename of wrapper dynamically or to a static value
BASENAME=$(basename $0)
PIDFILE=/tmp/$BASENAME.pid
RUNLOG=/tmp/$BASENAME.log
# /bin/echo for STDOUT or /usr/bin/logger for syslog
# - see the logger man page for customization options
LOGGER="/bin/echo"

# /path/to/script, command, or $@ for all args passed to the wrapper
SCRIPT="/bin/sleep 10"

runjob() {
    echo $$ > $PIDFILE
    PID=$(cat $PIDFILE)
    $LOGGER "$BASENAME: PID($PID): starting job.."
    $SCRIPT > $RUNLOG 2>&1
    $LOGGER "$(cat $RUNLOG)"
    $LOGGER "$BASENAME: PID($PID): done."
    rm $PIDFILE
}

if [ -f $PIDFILE ]; then
    PID=$(cat $PIDFILE)
    if ps -p $PID >/dev/null; then
        $LOGGER "$BASENAME: aborted - job PID($PID) is already running.."
        exit 0
    else
        $LOGGER "$BASENAME: $PIDFILE exists, but PID($PID) seems dead..  running job.."
        runjob
    fi
else
    runjob
fi

exit 0
